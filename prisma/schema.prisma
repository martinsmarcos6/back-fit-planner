// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Entidade User
model User {
  id       String @id @default(cuid())
  email    String @unique
  password String

  // Relacionamentos
  profile      Profile?
  workoutPlans WorkoutPlan[]

  // Relacionamentos sociais
  likes     Like[]
  favorites Favorite[]
  following Follow[]   @relation("UserFollowing")
  followers Follow[]   @relation("UserFollowers")

  // Campos de auditoria
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

// Entidade Profile
model Profile {
  id       String  @id @default(cuid())
  username String  @unique
  name     String
  bio      String?
  avatar   String?

  // Relacionamento com User
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Campos de auditoria
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profiles")
}

// Entidade WorkoutPlan (Plano de Treino)
model WorkoutPlan {
  id          String  @id @default(cuid())
  name        String
  description String?
  isPublic    Boolean @default(false)

  // Relacionamento com User
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relacionamento com WorkoutDay
  workoutDays WorkoutDay[]

  // Relacionamentos sociais
  likes     Like[]
  favorites Favorite[]

  // Campos de auditoria
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("workout_plans")
}

// Entidade WorkoutDay (Dia do Treino)
model WorkoutDay {
  id          String  @id @default(cuid())
  dayOfWeek   String // monday, tuesday, etc.
  workoutName String // "A", "B", "C", "Push", "Pull", etc.
  description String?

  // Relacionamento com WorkoutPlan
  workoutPlanId String
  workoutPlan   WorkoutPlan @relation(fields: [workoutPlanId], references: [id], onDelete: Cascade)

  // Relacionamento com Exercise
  exercises Exercise[]

  // Campos de auditoria
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([workoutPlanId, dayOfWeek])
  @@map("workout_days")
}

// Entidade Exercise (Exercício)
model Exercise {
  id          String  @id @default(cuid())
  name        String
  sets        Int
  repsRange   String // "8-12", "10", "15-20"
  weight      Float?
  restSeconds Int?
  order       Int
  notes       String?

  // Relacionamento com WorkoutDay
  workoutDayId String
  workoutDay   WorkoutDay @relation(fields: [workoutDayId], references: [id], onDelete: Cascade)

  // Relacionamento com ExerciseCatalog (catálogo base)
  catalogId String
  catalog   ExerciseCatalog @relation(fields: [catalogId], references: [id], onDelete: Restrict)

  // Campos de auditoria
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("exercises")
}

// Catálogo de Exercícios (exercícios base, pré-existentes)
model ExerciseCatalog {
  id   String @id @default(cuid())
  name String

  // Relacionamento com Exercise (instâncias em dias de treino)
  exercises Exercise[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("exercise_catalog")
}

// Entidade Like (Curtidas)
model Like {
  id String @id @default(cuid())

  // Relacionamento com User
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relacionamento com WorkoutPlan
  workoutPlanId String
  workoutPlan   WorkoutPlan @relation(fields: [workoutPlanId], references: [id], onDelete: Cascade)

  // Campos de auditoria
  createdAt DateTime @default(now())

  // Um usuário pode curtir um plano apenas uma vez
  @@unique([userId, workoutPlanId])
  @@map("likes")
}

// Entidade Favorite (Favoritos)
model Favorite {
  id String @id @default(cuid())

  // Relacionamento com User
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relacionamento com WorkoutPlan
  workoutPlanId String
  workoutPlan   WorkoutPlan @relation(fields: [workoutPlanId], references: [id], onDelete: Cascade)

  // Campos de auditoria
  createdAt DateTime @default(now())

  // Um usuário pode favoritar um plano apenas uma vez
  @@unique([userId, workoutPlanId])
  @@map("favorites")
}

// Entidade Follow (Seguidores)
model Follow {
  id String @id @default(cuid())

  // Usuário que está seguindo
  followerId String
  follower   User   @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)

  // Usuário que está sendo seguido
  followingId String
  following   User   @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  // Campos de auditoria
  createdAt DateTime @default(now())

  // Um usuário pode seguir outro apenas uma vez
  @@unique([followerId, followingId])
  @@map("follows")
}
